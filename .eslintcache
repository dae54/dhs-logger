[{"/home/dae54/Projects/WORK/fypdash/src/index.js":"1","/home/dae54/Projects/WORK/fypdash/src/App.jsx":"2","/home/dae54/Projects/WORK/fypdash/src/Context/AuthContext.jsx":"3","/home/dae54/Projects/WORK/fypdash/src/components/routes.jsx":"4","/home/dae54/Projects/WORK/fypdash/src/components/RouteWrapper.jsx":"5","/home/dae54/Projects/WORK/fypdash/src/utilities/location.js":"6","/home/dae54/Projects/WORK/fypdash/src/components/ShowForRole.jsx":"7","/home/dae54/Projects/WORK/fypdash/src/components/Sidebar/index.jsx":"8","/home/dae54/Projects/WORK/fypdash/src/components/Navbar/index.jsx":"9","/home/dae54/Projects/WORK/fypdash/src/components/ErrorBoundary.jsx":"10","/home/dae54/Projects/WORK/fypdash/src/env.js":"11","/home/dae54/Projects/WORK/fypdash/src/components/Navbar/Navbar.jsx":"12","/home/dae54/Projects/WORK/fypdash/src/components/Navbar/BreadCrumb.jsx":"13","/home/dae54/Projects/WORK/fypdash/src/pages/index.jsx":"14","/home/dae54/Projects/WORK/fypdash/src/pages/Dashboard/index.jsx":"15","/home/dae54/Projects/WORK/fypdash/src/api/loggerAPI.js":"16","/home/dae54/Projects/WORK/fypdash/src/api/axiosConfig.js":"17","/home/dae54/Projects/WORK/fypdash/src/api/resolve.js":"18","/home/dae54/Projects/WORK/fypdash/src/pages/Data/index.jsx":"19","/home/dae54/Projects/WORK/fypdash/src/pages/Teams/index.jsx":"20","/home/dae54/Projects/WORK/fypdash/src/pages/Data/NewCluster.jsx":"21","/home/dae54/Projects/WORK/fypdash/src/pages/Authentication/session.jsx":"22","/home/dae54/Projects/WORK/fypdash/src/services/decodeLocation.js":"23","/home/dae54/Projects/WORK/fypdash/src/components/ToastAlert.jsx":"24","/home/dae54/Projects/WORK/fypdash/src/pages/Teams/NewTeam.jsx":"25","/home/dae54/Projects/WORK/fypdash/src/api/teamsAPI.js":"26","/home/dae54/Projects/WORK/fypdash/src/pages/Enumerators/index.jsx":"27","/home/dae54/Projects/WORK/fypdash/src/pages/Enumerators/NewEnumerator.jsx":"28","/home/dae54/Projects/WORK/fypdash/src/api/enumeratorAPI.js":"29"},{"size":197,"mtime":1631609124965,"results":"30","hashOfConfig":"31"},{"size":1673,"mtime":1631609742950,"results":"32","hashOfConfig":"31"},{"size":1933,"mtime":1631609377313,"results":"33","hashOfConfig":"31"},{"size":2252,"mtime":1631855557603,"results":"34","hashOfConfig":"31"},{"size":498,"mtime":1631609124965,"results":"35","hashOfConfig":"31"},{"size":830,"mtime":1631609124965,"results":"36","hashOfConfig":"31"},{"size":423,"mtime":1631609124965,"results":"37","hashOfConfig":"31"},{"size":3374,"mtime":1631609124965,"results":"38","hashOfConfig":"31"},{"size":52,"mtime":1631609124965,"results":"39","hashOfConfig":"31"},{"size":774,"mtime":1631609124961,"results":"40","hashOfConfig":"31"},{"size":98,"mtime":1631609124965,"results":"41","hashOfConfig":"31"},{"size":16513,"mtime":1631769424130,"results":"42","hashOfConfig":"31"},{"size":1885,"mtime":1631609124965,"results":"43","hashOfConfig":"31"},{"size":1243,"mtime":1631610497518,"results":"44","hashOfConfig":"31"},{"size":2129,"mtime":1631959288553,"results":"45","hashOfConfig":"31"},{"size":1291,"mtime":1631884432635,"results":"46","hashOfConfig":"31"},{"size":461,"mtime":1631622920487,"results":"47","hashOfConfig":"31"},{"size":301,"mtime":1631621616394,"results":"48","hashOfConfig":"31"},{"size":5850,"mtime":1631959169031,"results":"49","hashOfConfig":"31"},{"size":4645,"mtime":1631876386579,"results":"50","hashOfConfig":"31"},{"size":10906,"mtime":1631887612012,"results":"51","hashOfConfig":"31"},{"size":131,"mtime":1631772759119,"results":"52","hashOfConfig":"31"},{"size":876,"mtime":1631773753829,"results":"53","hashOfConfig":"31"},{"size":498,"mtime":1631803054347,"results":"54","hashOfConfig":"31"},{"size":5338,"mtime":1631887315999,"results":"55","hashOfConfig":"31"},{"size":1075,"mtime":1631845523495,"results":"56","hashOfConfig":"31"},{"size":3678,"mtime":1631876407517,"results":"57","hashOfConfig":"31"},{"size":4077,"mtime":1631858329707,"results":"58","hashOfConfig":"31"},{"size":1099,"mtime":1631855388947,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"a1plom",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"62"},"/home/dae54/Projects/WORK/fypdash/src/index.js",[],["128","129"],"/home/dae54/Projects/WORK/fypdash/src/App.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/Context/AuthContext.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/components/routes.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/components/RouteWrapper.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/utilities/location.js",[],"/home/dae54/Projects/WORK/fypdash/src/components/ShowForRole.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/components/Sidebar/index.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/components/Navbar/index.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/components/ErrorBoundary.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/env.js",[],"/home/dae54/Projects/WORK/fypdash/src/components/Navbar/Navbar.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/components/Navbar/BreadCrumb.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/pages/index.jsx",["130"],"import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport routes from '../components/routes'\nimport RouteWrapper from '../components/RouteWrapper'\n// import NotFound from './Errors/NotFound'\nimport Sidebar from '../components/Sidebar'\nimport Navbar from '../components/Navbar'\n// import Footer from '../components/Footer'\n// import { CronJob } from 'cron'\n\nexport default function Main() {\n\n    return (\n        <div>\n            <Sidebar />\n            <div className=\"main-content\" id=\"panel\">\n                <Navbar />\n                <Switch>\n                    {routes.map(route =>\n                        <RouteWrapper\n                            exact\n                            path={route.url}\n                            component={route.component}\n                            roles={route.roles}\n                            key={route.url} />\n                    )}\n                    {/* <Route component={NotFound} /> */}\n                </Switch>\n                {/* {routes.map((item, index) => {\n                    return (<Route exact path={item.link} key={index} component={item.component} />)\n                })} */}\n                {/* <Footer /> */}\n            </div>\n\n\n        </div>\n    )\n}","/home/dae54/Projects/WORK/fypdash/src/pages/Dashboard/index.jsx",["131"],"/home/dae54/Projects/WORK/fypdash/src/api/loggerAPI.js",["132"],"import axios from './axiosConfig';\n\nimport { parseError, parseResponse, resolve } from './resolve.js';\n\nexport async function create(payload) {\n    return await axios.post('/logger', payload)\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\nexport async function updateOne(payload) {\n    return await axios.patch('/logger', payload)\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\nexport async function getAll() {\n    return await axios.get('/logger')\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\nexport async function getTeamVsClusters() {\n    return await axios.get('/logger/getTeamVsClusters')\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\nexport async function deleteOne(clusterId) {\n    return await axios.delete(`/logger/${clusterId}`)\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\n\n// export async function signOut() {\n//     return await axios.post('/users/signOut')\n//         .then(response => parseResponse(response))\n//         .catch(error => { throw parseError(error) })\n// }\n","/home/dae54/Projects/WORK/fypdash/src/api/axiosConfig.js",[],"/home/dae54/Projects/WORK/fypdash/src/api/resolve.js",[],"/home/dae54/Projects/WORK/fypdash/src/pages/Data/index.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/pages/Teams/index.jsx",["133"],"import React, { useEffect, useState } from 'react'\nimport * as TeamsAPI from '../../api/teamsAPI'\nimport MaterialTable from 'material-table'\nimport moment from 'moment'\nimport NewTeam from './NewTeam'\n\nexport default function Teams() {\n    const [logData, setLogData] = useState([])\n    const [status, setStatus] = useState({ code: 1, message: '' })\n    const [modalVisible, setModalVisible] = useState(false)\n\n    async function fetchAll() {\n        setStatus({ code: 0, message: '' })\n        await TeamsAPI.getAll()\n            .then(data => {\n                console.log(data)\n                setLogData(data)\n                setStatus({ code: 1, message: '' })\n\n            }).catch(error => {\n                setStatus({ code: 2, message: error.message })\n            })\n    }\n\n    useEffect(() => {\n        fetchAll()\n        return () => {\n            // setLogData()\n            // setStatus()\n        }\n    }, [])\n\n    function renderFullName(names) {\n        return `${names.firstName} ${names.middleName} ${names.lastName}`\n    }\n\n    return (\n        <div className=\"container-fluid mt-3\">\n            <div className=\"d-flex justify-content-end\">\n                <NewTeam updateTeams={setLogData} show={modalVisible} setShow={setModalVisible} />\n                <div className=\"btn btn-neutral mb-2 px-6\" onClick={() => setModalVisible(true)}>New Entry</div>\n            </div>\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"card\">\n                        <MaterialTable\n                            data={logData}\n                            totalCount\n                            editable={{\n                                onRowUpdate: async (newData, oldData) => {\n                                    await TeamsAPI.updateOne(newData).then(res => {\n                                        const dataUpdate = [...logData];\n                                        const index = oldData.tableData.id;\n                                        dataUpdate[index] = newData;\n                                        setLogData([...dataUpdate]);\n                                    }).catch(error => {\n                                        console.error(error)\n                                    })\n                                },\n                                onRowDelete: async oldData => {\n                                    console.log('delete')\n                                    await TeamsAPI.deleteOne(oldData._id)\n                                        .then(res => {\n                                            const dataDelete = [...logData];\n                                            const index = oldData.tableData.id;\n                                            dataDelete.splice(index, 1);\n                                            setLogData([...dataDelete]);\n                                        }).catch(error => {\n                                            console.error(error)\n                                        })\n                                },\n                            }}\n                            isLoading={status.code === 0}\n                            title='Registered Teams'\n                            columns={[\n                                { title: 'Team Number', field: 'teamNumber' },\n                                { title: 'Supervisor', field: 'cluster', render: (data) => renderFullName(data.supervisor) },\n                                { title: 'Member 1', field: 'member', render: (data) => renderFullName(data.members[0].memberId) },\n                                { title: 'Member 2', field: 'member', render: (data) => renderFullName(data.members[1].memberId) },\n                                // { title: 'Listed Households', field: 'listedHouseholds', },\n                                // { title: 'Survey Date', field: 'surveyDate', render: (data) => `${moment(data.surveyDate).fromNow()} (${moment(data.surveyDate).format('DD MMM')})` },\n                                // { title: 'altitude', field: 'decodedGPS', render: (data) => data.decodedGPS.region },\n                                // { title: 'Region', field: 'decodedGPS', render: (data) => data.decodedGPS.region },\n                                // { title: 'Registered At', field: 'createdAt', render: (data) => moment(data.createdAt).fromNow() },\n                                // { title: 'surveyDate', field: 'birthCity', lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' } }\n                            ]}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","/home/dae54/Projects/WORK/fypdash/src/pages/Data/NewCluster.jsx",["134","135","136","137","138"],"import React, { useRef, useState, useEffect } from 'react'\nimport { Modal, Button } from 'react-bootstrap'\nimport * as LoggerAPI from '../../api/loggerAPI'\nimport * as TeamsAPI from '../../api/teamsAPI'\nimport ToastAlert from '../../components/ToastAlert'\n\nimport decodeLocation from '../../services/decodeLocation'\n\nexport default function NewCluster({ show, setShow }) {\n    function handleClose() {\n        setShow(false)\n    }\n\n    const [showToast, setShowToast] = useState(false)\n    const [loading, setLoading] = useState(false)\n    // code defn\n    /**\n     * 0 loading\n     * 1 success\n     * 2 error\n     */\n    const [status, setStatus] = useState({ code: 1, message: '' })\n    const [teamNames, setTeamNames] = useState([])\n\n    const enumeratorRef = useRef()\n    const clusterRef = useRef()\n    // const supervisorRef = useRef()\n    // const member1Ref = useRef()\n    // const member2Ref = useRef()\n    const surveyDateRef = useRef()\n    const expectedHouseHoldsRef = useRef()\n    const listedHouseHoldsRef = useRef()\n    const latRef = useRef()\n    const lngRef = useRef()\n    const altRef = useRef()\n    const regionRef = useRef()\n    const teamNumberRef = useRef()\n    const othersRef = useRef()\n\n    const formRef = useRef()\n\n\n\n    async function addRecord(e) {\n        e.preventDefault()\n        const payload = {\n            enumerator: enumeratorRef.current.value,\n            cluster: clusterRef.current.value,\n            surveyDate: new Date(surveyDateRef.current.value),\n            expectedHouseHolds: expectedHouseHoldsRef.current.value,\n            listedHouseholds: listedHouseHoldsRef.current.value,\n            teamNumber: teamNumberRef.current.value,\n            gps: {\n                latitude: latRef.current.value,\n                longitude: lngRef.current.value,\n                altitude: altRef.current.value,\n            },\n            decodedGPS: {\n                region: regionRef.current.value,\n                // district: districtRef.current.value,\n                // ward: wardRef.current.value,\n                // street: streetRef.current.value,\n                other: othersRef.current.value,\n            }\n        }\n        setStatus({ code: 0, message: '' })\n\n        await LoggerAPI.create(payload).then(data => {\n            console.log(data)\n            setStatus({ code: 1, message: 'Successfully Added' })\n            formRef.current.reset()\n        }).catch(error => {\n            console.log(error)\n            setStatus({ code: 2, message: error.message })\n        })\n    }\n\n    async function getAllTeamNames() {\n        setLoading(true)\n        await TeamsAPI.getAll()\n            .then(teams => {\n                console.log('enums', teams)\n                setTeamNames(teams)\n            }).catch(error => {\n                console.log(error)\n            }).finally(() => {\n                setLoading(false)\n            })\n    }\n\n    async function getLocationAddress() {\n        // https://www.google.com/maps/@-6.0138888,37.9361579,14024m/data=!3m1!1e3!5m1!1e4\n        window.open(`https://www.google.com/maps/@${latRef.current.value},${lngRef.current.value},${altRef.current.value}m/data=!3m1!1e3!5m1!1e4`)\n        // await decodeLocation({ lat: latRef.current.value, lng: lngRef.current.value })\n        //     .then(address => {\n        //         console.log(address)\n        //         handleClose()\n        //         // address\n        //     }).catch(error => {\n        //         console.log(error)\n        //     })\n    }\n\n    useEffect(() => {\n        getAllTeamNames()\n        return () => {\n        }\n    }, [])\n\n    return (\n        <Modal\n            show={show}\n            size=\"xl\"\n            onHide={handleClose}\n            onHide={handleClose}\n            backdrop=\"static\"\n            keyboard={false}\n        >\n            <Modal.Header closeButton>\n                {/* <Modal.Title>Modal heading</Modal.Title> */}\n            </Modal.Header>\n            <ToastAlert show={showToast} setShow={setShowToast} message={status.message} />\n            <Modal.Body>\n                {/* <Logger /> */}\n                <form onSubmit={addRecord} className='' ref={formRef}>\n                    <h3 className='text-uppercase'>Team Information</h3>\n                    <div class=\"form-row\">\n                        <div class=\"form-group col-md-2\">\n                            <label for=\"inputEmail\">Enumerator Number:</label>\n                            <input type=\"number\" ref={enumeratorRef} class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-2\">\n                            <label for=\"inputEmail\">Cluster Number:</label>\n                            <input type=\"number\" ref={clusterRef} class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-2\">\n                            <label for=\"inputEmail\">Team Number:</label>\n                            {/* <input type=\"number\" ref={teamNumberRef} class=\"form-control\" /> */}\n                            <select className='form-control' ref={teamNumberRef}>\n                                <option value={0}>Select Team Number </option>\n                                {teamNames.map(team => {\n                                    return (\n                                        <option value={team._id}>{team.teamNumber}</option>\n                                    )\n                                })}\n                            </select>\n                        </div>\n                        {/* <div class=\"form-group col-md-10\"></div>\n                        <h5 className='form-group col-md-10'>Team Members</h5>\n\n                        <div class=\"form-group col-md-4\">\n                            <label >Supervisor:</label>\n                            <input type=\"text\" ref={supervisorRef} class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-4\">\n                            <label >Member 1:</label>\n                            <input ref={member1Ref} class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-4\">\n                            <label >Member 2:</label>\n                            <input ref={member2Ref} class=\"form-control\" />\n                        </div> */}\n                    </div>\n\n\n                    <h3 className='text-uppercase'>Survey Descriptions</h3>\n                    <div class=\"form-row\">\n                        <div class=\"form-group col-md-2\">\n                            <label for=\"inputEmail\">Conduct Date:</label>\n                            <input ref={surveyDateRef} type='date' class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-4\">\n                            <label >Households expected in cluster:</label>\n                            <input type='number' ref={expectedHouseHoldsRef} class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-4\">\n                            <label >households listed:</label>\n                            <input type='number' ref={listedHouseHoldsRef} class=\"form-control\" />\n                        </div>\n\n                        <div class=\"form-group col-md-10\"></div>\n                        <h5 className='form-group col-md-12'>GPS Coordinates</h5>\n\n                        <div class=\"form-group col-md-2\">\n                            <label >Latitude:</label>\n                            <input ref={latRef} type=\"decimal\" class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-2\">\n                            <label >Longitude:</label>\n                            <input ref={lngRef} type='decimal' class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-2\">\n                            <label >Altitude:</label>\n                            <input ref={altRef} type='number' class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-2\">\n                            <label >-</label>\n                            <button className='form-control btn btn-default px-5' type=\"button\" onClick={getLocationAddress}>Decode</button>\n                        </div>\n\n                        <h5 className='form-group col-md-12'></h5>\n\n                        <div class=\"form-group col-md-2\">\n                            <label >Region:</label>\n                            <input ref={regionRef} class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-8\">\n                            <label >Other:</label>\n                            <input ref={othersRef} class=\"form-control\" />\n                        </div>\n                    </div>\n                    {status.message &&\n                        <div className='alert alert-warning text-center'>{status.message}</div>\n                    }\n                    <button className='float-right btn btn-default px-5' type=\"submit\">\n                        Save\n                        {status.code === 0 &&\n                            <span className='spinner-border spinner-border-sm'></span>\n                        }\n                    </button>\n                    <button className='float-right btn btn-neutral px-5 mr-3' onClick={() => setShowToast(true)}>Clear Input</button>\n                </form>\n            </Modal.Body>\n            {/* <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleClose}>\n                    Save Changes\n                </Button>\n            </Modal.Footer> */}\n        </Modal>\n        // <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        //     <div class=\"modal-dialog\">\n        //         <div class=\"modal-content\">\n        //             <div class=\"modal-header\">\n        //                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n        //                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n        //                     <span aria-hidden=\"true\">&times;</span>\n        //                 </button>\n        //             </div>\n        //             <div class=\"modal-body\">\n\n        //             </div>\n        //             <div class=\"modal-footer\">\n        //                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n        //                 <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\n        //             </div>\n        //         </div>\n        //     </div>\n        // </div>\n    )\n}","/home/dae54/Projects/WORK/fypdash/src/pages/Authentication/session.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/services/decodeLocation.js",[],"/home/dae54/Projects/WORK/fypdash/src/components/ToastAlert.jsx",[],"/home/dae54/Projects/WORK/fypdash/src/pages/Teams/NewTeam.jsx",["139","140"],"import React, { useEffect, useRef, useState } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport * as TeamsAPI from '../../api/teamsAPI'\nimport * as EnumerartorAPI from '../../api/enumeratorAPI'\n\n\nexport default function NewTeam({ show, setShow, updateTeams }) {\n    function handleClose() {\n        setShow(false)\n    }\n\n    const [loading, setLoading] = useState(false)\n    // code defn\n    /**\n     * 0 loading\n     * 1 success\n     * 2 error\n     */\n    const [status, setStatus] = useState({ code: 1, message: '' })\n    const [enumerators, setEnumerators] = useState([])\n\n\n    const teamNumberRef = useRef()\n    const supervisorRef = useRef()\n    const member1Ref = useRef()\n    const member2Ref = useRef()\n\n    const formRef = useRef()\n\n\n\n\n\n\n    async function addRecord(e) {\n        e.preventDefault()\n        const payload = {\n            supervisor: supervisorRef.current.value,\n            members: [\n                member1Ref.current.value,\n                member2Ref.current.value\n            ],\n            teamNumber: teamNumberRef.current.value\n        }\n        setStatus({ code: 0, message: '' })\n\n        await TeamsAPI.create(payload).then(data => {\n            formRef.current.reset()\n            setStatus({ code: 1, message: 'Successfully Added' })\n            updateTeams(teams => [data].concat(teams))\n        }).catch(error => {\n            console.log(error)\n            setStatus({ code: 2, message: error.message })\n        })\n    }\n\n    async function getEnumerators() {\n        setLoading(true)\n        await EnumerartorAPI.getAll()\n            .then(enums => {\n                console.log('enums', enums)\n                setEnumerators(enums)\n            }).catch(error => {\n                console.log(error)\n            }).finally(() => {\n                setLoading(false)\n            })\n    }\n\n    useEffect(() => {\n        getEnumerators()\n    }, [])\n\n    return (\n        <Modal\n            show={show}\n            size=\"xl\"\n            onHide={handleClose}\n            onHide={handleClose}\n            backdrop=\"static\"\n            keyboard={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <h3 className='text-uppercase'>Team Information</h3>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <form onSubmit={addRecord} className='' ref={formRef}>\n                    <div class=\"form-row\">\n                        <div class=\"form-group col-md-2\">\n                            <label >Team Number:</label>\n                            <input type=\"number\" ref={teamNumberRef} class=\"form-control\" />\n                        </div>\n                        <h4 className='form-group col-md-12 my-1'>Team Members</h4>\n\n                        <div className='form-group col-md-4'>\n                            <label >Supervisor:</label>\n                            <select className='form-control' ref={supervisorRef}>\n                                <option value={0}>Select Enumerator </option>\n                                {enumerators.map(enumerator => {\n                                    return (\n                                        <option value={enumerator._id}>{enumerator.firstName}</option>\n                                    )\n                                })}\n                            </select>\n                        </div>\n                        <div className='form-group col-md-4'>\n                            <label >Member 1:</label>\n                            <select className='form-control' ref={member1Ref}>\n                                <option value={0}>Select Enumerator </option>\n                                {enumerators.map(enumerator => {\n                                    return (\n                                        <option value={enumerator._id}>{enumerator.firstName}</option>\n                                    )\n                                })}\n                            </select>\n                        </div>\n                        <div className='form-group col-md-4'>\n                            <label >Member 2:</label>\n                            <select className='form-control' ref={member2Ref}>\n                                <option value={0}>Select Enumerator </option>\n                                {enumerators.map(enumerator => {\n                                    return (\n                                        <option value={enumerator._id}>{enumerator.firstName}</option>\n                                    )\n                                })}\n                            </select>\n                        </div>\n                    </div>\n                    {status.message &&\n                        <div className='alert alert-warning text-center'>{status.message}</div>\n                    }\n                    <button className='float-right btn btn-default px-5' type=\"submit\">\n                        Save\n                        {status.code === 0 &&\n                            <span className='spinner-border spinner-border-sm'></span>\n                        }\n                    </button>\n                    <button className='float-right btn btn-neutral px-5 mr-3' type='reset'>Clear Input</button>\n                </form>\n            </Modal.Body>\n        </Modal>\n    )\n}","/home/dae54/Projects/WORK/fypdash/src/api/teamsAPI.js",["141"],"import axios from './axiosConfig';\n\nimport { parseError, parseResponse, resolve } from './resolve.js';\n\nexport async function create(payload) {\n    return await axios.post('/team', payload)\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\nexport async function updateOne(payload) {\n    return await axios.patch('/team', payload)\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\nexport async function getAll() {\n    return await axios.get('/team')\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\nexport async function deleteOne(clusterId) {\n    return await axios.delete(`/team/${clusterId}`)\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\n// export async function signOut() {\n//     return await axios.post('/users/signOut')\n//         .then(response => parseResponse(response))\n//         .catch(error => { throw parseError(error) })\n// }\n","/home/dae54/Projects/WORK/fypdash/src/pages/Enumerators/index.jsx",["142"],"import React, { useEffect, useState } from 'react'\nimport * as EnumeratorAPI from '../../api/enumeratorAPI'\nimport MaterialTable from 'material-table'\nimport moment from 'moment'\nimport NewEnumerator from './NewEnumerator'\n\nexport default function Enumerators() {\n    const [enumerators, setEnumerators] = useState([])\n    const [status, setStatus] = useState({ code: 1, message: '' })\n    const [modalVisible, setModalVisible] = useState(false)\n\n    async function fetchAll() {\n        setStatus({ code: 0, message: '' })\n        await EnumeratorAPI.getAll()\n            .then(data => {\n                console.log(data)\n                setEnumerators(data)\n                setStatus({ code: 1, message: '' })\n\n            }).catch(error => {\n                setStatus({ code: 2, message: error.message })\n            })\n    }\n\n    useEffect(() => {\n        fetchAll()\n        return () => {\n            // setLogData()\n            // setStatus()\n        }\n    }, [])\n\n    return (\n        <div className=\"container-fluid mt-3\">\n            <div className=\"d-flex justify-content-end\">\n                <NewEnumerator setEnumerators={setEnumerators} show={modalVisible} setShow={setModalVisible} />\n                <div className=\"btn btn-neutral mb-2 px-6\" onClick={() => setModalVisible(true)}>New Entry</div>\n            </div>\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"card rounded\">\n                        <MaterialTable\n                            data={enumerators}\n                            totalCount\n                            editable={{\n                                onRowUpdate: async (newData, oldData) => {\n                                    await EnumeratorAPI.updateOne(newData).then(res => {\n                                        const dataUpdate = [...enumerators];\n                                        const index = oldData.tableData.id;\n                                        dataUpdate[index] = newData;\n                                        setEnumerators([...dataUpdate]);\n                                    }).catch(error => {\n                                        console.error(error)\n                                    })\n                                },\n                                onRowDelete: async oldData => {\n                                    console.log('delete')\n                                    await EnumeratorAPI.deleteOne(oldData._id)\n                                        .then(res => {\n                                            const dataDelete = [...enumerators];\n                                            const index = oldData.tableData.id;\n                                            dataDelete.splice(index, 1);\n                                            setEnumerators([...dataDelete]);\n                                        }).catch(error => {\n                                            console.error(error)\n                                        })\n                                },\n                            }}\n                            isLoading={status.code === 0}\n                            title='Registered Enumerators'\n                            columns={[\n                                { title: 'Full Name', render: (data) => `${data.firstName} ${data.middleName} ${data.lastName}` },\n                                { title: 'Phone Number', field: 'phoneNumber', emptyValue: 'no val' },\n                                { title: 'Role', field: 'role', },\n                            ]}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","/home/dae54/Projects/WORK/fypdash/src/pages/Enumerators/NewEnumerator.jsx",["143"],"import React, { useRef, useState } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport * as EnumeratorAPI from '../../api/enumeratorAPI'\n\n\nexport default function NewTeam({ show, setShow, setEnumerators }) {\n    function handleClose() {\n        setShow(false)\n    }\n\n    // const [showToast, setShowToast] = useState(false)\n    // const [loading, setLoading] = useState(false)\n    // code defn\n    /**\n     * 0 loading\n     * 1 success\n     * 2 error\n     */\n    const [status, setStatus] = useState({ code: 1, message: '' })\n\n    const firstNameRef = useRef()\n    const lastNameRef = useRef()\n    const middleNameRef = useRef()\n    const phoneNumberRef = useRef()\n    // const emailRef = useRef()\n    const roleRef = useRef()\n\n    async function addRecord(e) {\n        e.preventDefault()\n        const payload = {\n            firstName: firstNameRef.current.value,\n            middleName: middleNameRef.current.value,\n            lastName: lastNameRef.current.value,\n            phoneNumber: phoneNumberRef.current.value,\n            role: roleRef.current.value\n        }\n        console.log(payload)\n        setStatus({ code: 0, message: '' })\n\n        await EnumeratorAPI.create(payload).then(data => {\n            console.log(data)\n            setEnumerators(enumerators => [data].concat(enumerators))\n            setStatus({ code: 1, message: 'Successfully Added' })\n        }).catch(error => {\n            console.log(error)\n            setStatus({ code: 2, message: error.message })\n        })\n    }\n\n    return (\n        <Modal\n            show={show}\n            size=\"xl\"\n            onHide={handleClose}\n            onHide={handleClose}\n            backdrop=\"static\"\n            keyboard={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <h3 className='text-uppercase'>New Enumerator</h3>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <form onSubmit={addRecord} className=''>\n                    <div class=\"form-row\">\n                        <div class=\"form-group col-md-3\">\n                            <label >First Name:</label>\n                            <input type=\"text\" ref={firstNameRef} class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-3\">\n                            <label >Middle Name:</label>\n                            <input type=\"text\" ref={middleNameRef} class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-3\">\n                            <label >Last Name:</label>\n                            <input type=\"text\" ref={lastNameRef} class=\"form-control\" />\n                        </div>\n                        <div class=\"form-group col-md-4\">\n                            <label>Phone Number:</label>\n                            <input type=\"number\" ref={phoneNumberRef} class=\"form-control\" />\n                        </div>\n                        <div className='form-group col-md-4'>\n                            <label >Role:</label>\n                            <select className='form-control' ref={roleRef}>\n                                <option value='member'>Member</option>\n                                <option value='supervisor'>Supervisor</option>\n                            </select>\n                        </div>\n                    </div>\n                    {status.message &&\n                        <div className='alert alert-warning text-center'>{status.message}</div>\n                    }\n                    <button className='float-right btn btn-default px-5' type=\"submit\">\n                        Save\n                        {status.code === 0 &&\n                            <span className='spinner-border spinner-border-sm'></span>\n                        }\n                    </button>\n                    <button className='float-right btn btn-neutral px-5 mr-3' type='reset'>Clear Input</button>\n                </form>\n            </Modal.Body>\n        </Modal>\n    )\n}","/home/dae54/Projects/WORK/fypdash/src/api/enumeratorAPI.js",["144"],"import axios from './axiosConfig';\n\nimport { parseError, parseResponse, resolve } from './resolve.js';\n\nexport async function create(payload) {\n    return await axios.post('/enumerator', payload)\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\nexport async function updateOne(payload) {\n    return await axios.patch('/enumerator', payload)\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\nexport async function getAll() {\n    return await axios.get('/enumerator')\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\nexport async function deleteOne(clusterId) {\n    return await axios.delete(`/enumerator/${clusterId}`)\n        .then(response => parseResponse(response))\n        .catch(error => { throw parseError(error) })\n}\n\n// export async function signOut() {\n//     return await axios.post('/users/signOut')\n//         .then(response => parseResponse(response))\n//         .catch(error => { throw parseError(error) })\n// }\n",{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":2,"column":10,"nodeType":"151","messageId":"152","endLine":2,"endColumn":15},{"ruleId":"149","severity":1,"message":"153","line":8,"column":11,"nodeType":"151","messageId":"152","endLine":8,"endColumn":15},{"ruleId":"149","severity":1,"message":"154","line":3,"column":37,"nodeType":"151","messageId":"152","endLine":3,"endColumn":44},{"ruleId":"149","severity":1,"message":"155","line":4,"column":8,"nodeType":"151","messageId":"152","endLine":4,"endColumn":14},{"ruleId":"149","severity":1,"message":"156","line":2,"column":17,"nodeType":"151","messageId":"152","endLine":2,"endColumn":23},{"ruleId":"149","severity":1,"message":"157","line":7,"column":8,"nodeType":"151","messageId":"152","endLine":7,"endColumn":22},{"ruleId":"149","severity":1,"message":"158","line":15,"column":12,"nodeType":"151","messageId":"152","endLine":15,"endColumn":19},{"ruleId":"159","severity":1,"message":"160","line":115,"column":13,"nodeType":"161","messageId":"162","endLine":115,"endColumn":33},{"ruleId":"163","severity":1,"message":"164","line":201,"column":25,"nodeType":"165","endLine":201,"endColumn":62},{"ruleId":"149","severity":1,"message":"158","line":12,"column":12,"nodeType":"151","messageId":"152","endLine":12,"endColumn":19},{"ruleId":"159","severity":1,"message":"160","line":79,"column":13,"nodeType":"161","messageId":"162","endLine":79,"endColumn":33},{"ruleId":"149","severity":1,"message":"154","line":3,"column":37,"nodeType":"151","messageId":"152","endLine":3,"endColumn":44},{"ruleId":"149","severity":1,"message":"155","line":4,"column":8,"nodeType":"151","messageId":"152","endLine":4,"endColumn":14},{"ruleId":"159","severity":1,"message":"160","line":55,"column":13,"nodeType":"161","messageId":"162","endLine":55,"endColumn":33},{"ruleId":"149","severity":1,"message":"154","line":3,"column":37,"nodeType":"151","messageId":"152","endLine":3,"endColumn":44},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'resolve' is defined but never used.","'moment' is defined but never used.","'Button' is defined but never used.","'decodeLocation' is defined but never used.","'loading' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]